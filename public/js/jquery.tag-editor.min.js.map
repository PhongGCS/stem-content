{"version":3,"sources":["jquery.tag-editor.js"],"names":[],"mappingsfile":"jquery.tag-editor.min.js","sourcesContent":["/*\n\tjQuery tagEditor v1.0.21\n    Copyright (c) 2014 Simon Steinberger / Pixabay\n    GitHub: https://github.com/Pixabay/jQuery-tagEditor\n\tLicense: http://www.opensource.org/licenses/mit-license.php\n*/\n\n(function($){\n    // auto grow input (stackoverflow.com/questions/931207)\n    $.fn.tagEditorInput=function(){var t=\" \",e=$(this),n=parseInt(e.css(\"fontSize\")),i=$(\"<span/>\").css({position:\"absolute\",top:-9999,left:-9999,width:\"auto\",fontSize:e.css(\"fontSize\"),fontFamily:e.css(\"fontFamily\"),fontWeight:e.css(\"fontWeight\"),letterSpacing:e.css(\"letterSpacing\"),whiteSpace:\"nowrap\"}),s=function(){if(t!==(t=e.val())){i.text(t);var s=i.width()+n;20>s&&(s=20),s!=e.width()&&e.width(s)}};return i.insertAfter(e),e.bind(\"keyup keydown focus\",s)};\n\n    // plugin with val as parameter for public methods\n    $.fn.tagEditor = function(options, val, blur){\n\n        // helper\n        function escape(tag) {\n            return tag.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\n        }\n\n        // build options dictionary with default values\n        var blur_result, o = $.extend({}, $.fn.tagEditor.defaults, options), selector = this;\n\n        // store regex and default delimiter in options for later use\n        o.dregex = new RegExp('['+o.delimiter.replace('-', '\\-')+']', 'g');\n\n        // public methods\n        if (typeof options == 'string') {\n            // depending on selector, response may contain tag lists of multiple editor instances\n            var response = [];\n            selector.each(function(){\n                // the editor is the next sibling to the hidden, original field\n                var el = $(this), o = el.data('options'), ed = el.next('.tag-editor');\n                if (options == 'getTags')\n                    response.push({field: el[0], editor: ed, tags: ed.data('tags')});\n                else if (options == 'addTag') {\n                    if (o.maxTags && ed.data('tags').length >= o.maxTags) return false;\n                    // insert new tag\n                    $('<li><div class=\"tag-editor-spacer\">&nbsp;'+o.delimiter[0]+'</div><div class=\"tag-editor-tag\"></div><div class=\"tag-editor-delete\"><i></i></div></li>').appendTo(ed).find('.tag-editor-tag')\n                        .html('<input type=\"text\" maxlength=\"'+o.maxLength+'\">').addClass('active').find('input').val(val).blur();\n                    if (!blur) ed.click();\n                    else $('.placeholder', ed).remove();\n                } else if (options == 'removeTag') {\n                    // trigger delete on matching tag, then click editor to create a new tag\n                    $('.tag-editor-tag', ed).filter(function(){return $(this).text()==val;}).closest('li').find('.tag-editor-delete').click();\n                    if (!blur) ed.click();\n                } else if (options == 'destroy') {\n                    el.removeClass('tag-editor-hidden-src').removeData('options').off('focus.tag-editor').next('.tag-editor').remove();\n                }\n            });\n            return options == 'getTags' ? response : this;\n        }\n\n        // delete selected tags on backspace, delete, ctrl+x\n        if (window.getSelection) $(document).off('keydown.tag-editor').on('keydown.tag-editor', function(e){\n            if (e.which == 8 || e.which == 46 || e.ctrlKey && e.which == 88) {\n                try {\n                    var sel = getSelection(), el = document.activeElement.tagName != 'INPUT' ? $(sel.getRangeAt(0).startContainer.parentNode).closest('.tag-editor') : 0;\n                } catch(e){ el = 0; }\n                if (sel.rangeCount > 0 && el && el.length) {\n                    var tags = [], splits = sel.toString().split(el.prev().data('options').dregex);\n                    for (i=0; i<splits.length; i++){ var tag = $.trim(splits[i]); if (tag) tags.push(tag); }\n                    $('.tag-editor-tag', el).each(function(){\n                        if (~$.inArray($(this).text(), tags)) $(this).closest('li').find('.tag-editor-delete').click();\n                    });\n                    return false;\n                }\n            }\n        });\n\n        return selector.each(function(){\n            var el = $(this), tag_list = []; // cache current tags\n\n            // create editor (ed) instance\n            var ed = $('<ul '+(o.clickDelete ? 'oncontextmenu=\"return false;\" ' : '')+'class=\"tag-editor\"></ul>').insertAfter(el);\n            el.addClass('tag-editor-hidden-src') // hide original field\n                .data('options', o) // set data on hidden field\n                .on('focus.tag-editor', function(){ ed.click(); }); // simulate tabindex\n\n            // add dummy item for min-height on empty editor\n            ed.append('<li style=\"width:1px\">&nbsp;</li>');\n\n            // markup for new tag\n            var new_tag = '<li><div class=\"tag-editor-spacer\">&nbsp;'+o.delimiter[0]+'</div><div class=\"tag-editor-tag\"></div><div class=\"tag-editor-delete\"><i></i></div></li>';\n\n            // helper: update global data\n            function set_placeholder(){\n                if (o.placeholder && !tag_list.length && !$('.deleted, .placeholder, input', ed).length)\n                    ed.append('<li class=\"placeholder\"><div>'+o.placeholder+'</div></li>');\n            }\n\n            // helper: update global data\n            function update_globals(init){\n                var old_tags = tag_list.toString();\n                tag_list = $('.tag-editor-tag:not(.deleted)', ed).map(function(i, e) {\n                    var val = $.trim($(this).hasClass('active') ? $(this).find('input').val() : $(e).text());\n                    if (val) return val;\n                }).get();\n                ed.data('tags', tag_list);\n                el.val(tag_list.join(o.delimiter[0]));\n                // change callback except for plugin init\n                if (!init) if (old_tags != tag_list.toString()) o.onChange(el, ed, tag_list);\n                set_placeholder();\n            }\n\n            ed.click(function(e, closest_tag){\n\n                var d, dist = 99999, loc;\n\n                // do not create tag when user selects tags by text selection\n                if (window.getSelection && getSelection() != '') return;\n\n                if (o.maxTags && ed.data('tags').length >= o.maxTags) { ed.find('input').blur(); return false; }\n\n                blur_result = true\n                $('input:focus', ed).blur();\n                if (!blur_result) return false;\n                blur_result = true\n\n                // always remove placeholder on click\n                $('.placeholder', ed).remove();\n                if (closest_tag && closest_tag.length)\n                    loc = 'before';\n                else {\n                    // calculate tag closest to click position\n                    $('.tag-editor-tag', ed).each(function(){\n                        var tag = $(this), to = tag.offset(), tag_x = to.left, tag_y = to.top;\n                        if (e.pageY >= tag_y && e.pageY <= tag_y+tag.height()) {\n                            if (e.pageX < tag_x) loc = 'before', d = tag_x - e.pageX;\n                            else loc = 'after', d = e.pageX - tag_x - tag.width();\n                            if (d < dist) dist = d, closest_tag = tag;\n                        }\n                    });\n                }\n\n                if (loc == 'before') {\n                    $(new_tag).insertBefore(closest_tag.closest('li')).find('.tag-editor-tag').click();\n                } else if (loc == 'after')\n                    $(new_tag).insertAfter(closest_tag.closest('li')).find('.tag-editor-tag').click();\n                else // empty editor\n                    $(new_tag).appendTo(ed).find('.tag-editor-tag').click();\n\n                return false;\n            });\n\n            ed.on('click', '.tag-editor-delete', function(e){\n                // delete icon is hidden when input is visible; place cursor near invisible delete icon on click\n                if ($(this).prev().hasClass('active')) { $(this).closest('li').find('input').caret(-1); return false; }\n\n                var li = $(this).closest('li'), tag = li.find('.tag-editor-tag');\n                if (o.beforeTagDelete(el, ed, tag_list, tag.text()) === false) return false;\n                tag.addClass('deleted').animate({width: 0}, o.animateDelete, function(){ li.remove(); set_placeholder(); });\n                update_globals();\n                return false;\n            });\n\n            // delete on right mouse click or ctrl+click\n            if (o.clickDelete)\n                ed.on('mousedown', '.tag-editor-tag', function(e){\n                    if (e.ctrlKey || e.which > 1) {\n                        var li = $(this).closest('li'), tag = li.find('.tag-editor-tag');\n                        if (o.beforeTagDelete(el, ed, tag_list, tag.text()) === false) return false;\n                        tag.addClass('deleted').animate({width: 0}, o.animateDelete, function(){ li.remove(); set_placeholder(); });\n                        update_globals();\n                        return false;\n                    }\n                });\n\n            ed.on('click', '.tag-editor-tag', function(e){\n                // delete on right click or ctrl+click -> exit\n                if (o.clickDelete && (e.ctrlKey || e.which > 1)) return false;\n\n                if (!$(this).hasClass('active')) {\n                    var tag = $(this).text();\n                    // guess cursor position in text input\n                    var left_percent = Math.abs(($(this).offset().left - e.pageX)/$(this).width()), caret_pos = parseInt(tag.length*left_percent),\n                        input = $(this).html('<input type=\"text\" maxlength=\"'+o.maxLength+'\" value=\"'+escape(tag)+'\">').addClass('active').find('input');\n                    input.data('old_tag', tag).tagEditorInput().focus().caret(caret_pos);\n                    if (o.autocomplete) {\n                        var aco = $.extend({}, o.autocomplete);\n                        // extend user provided autocomplete select method\n                        var ac_select = 'select'  in aco ? o.autocomplete.select : '';\n                        aco.select = function(e, ui){ if (ac_select) ac_select(e, ui); setTimeout(function(){\n                            // ed.trigger('click', [$('.active', ed).find('input').closest('li').next('li').find('.tag-editor-tag')]);\n                        }, 20); };\n                        input.autocomplete(aco);\n                        input.autocomplete('search','');\n                    }\n                }\n                return false;\n            });\n\n            // helper: split into multiple tags, e.g. after paste\n            function split_cleanup(input){\n                var li = input.closest('li'), sub_tags = input.val().replace(/ +/, ' ').split(o.dregex),\n                    old_tag = input.data('old_tag'), old_tags = tag_list.slice(0), exceeded = false, cb_val; // copy tag_list\n                for (var i=0; i<sub_tags.length; i++) {\n                    tag = $.trim(sub_tags[i]).slice(0, o.maxLength);\n                    if (o.forceLowercase) tag = tag.toLowerCase();\n                    cb_val = o.beforeTagSave(el, ed, old_tags, old_tag, tag);\n                    tag = cb_val || tag;\n                    if (cb_val === false || !tag) continue;\n                    // remove duplicates\n                    if (o.removeDuplicates && ~$.inArray(tag, old_tags))\n                        $('.tag-editor-tag', ed).each(function(){ if ($(this).text() == tag) $(this).closest('li').remove(); });\n                    old_tags.push(tag);\n                    li.before('<li><div class=\"tag-editor-spacer\">&nbsp;'+o.delimiter[0]+'</div><div class=\"tag-editor-tag\">'+escape(tag)+'</div><div class=\"tag-editor-delete\"><i></i></div></li>');\n                    if (o.maxTags && old_tags.length >= o.maxTags) { exceeded = true; break; }\n                }\n                input.attr('maxlength', o.maxLength).removeData('old_tag').val('')\n                if (exceeded) input.blur(); else input.focus();\n                update_globals();\n            }\n\n            ed.on('blur', 'input', function(e){\n                e.stopPropagation();\n                var input = $(this), old_tag = input.data('old_tag'), tag = $.trim(input.val().replace(/ +/, ' ').replace(o.dregex, o.delimiter[0]));\n                if (!tag) {\n                    if (old_tag && o.beforeTagDelete(el, ed, tag_list, old_tag) === false) {\n                        input.val(old_tag).focus();\n                        blur_result = false;\n                        update_globals();\n                        return;\n                    }\n                    try { input.closest('li').remove(); } catch(e){}\n                    if (old_tag) update_globals();\n                }\n                else if (tag.indexOf(o.delimiter[0])>=0) { split_cleanup(input); return; }\n                else if (tag != old_tag) {\n                    if (o.forceLowercase) tag = tag.toLowerCase();\n                    cb_val = o.beforeTagSave(el, ed, tag_list, old_tag, tag);\n                    tag = cb_val || tag;\n                    if (cb_val === false) {\n                        if (old_tag) {\n                            input.val(old_tag).focus();\n                            blur_result = false;\n                            update_globals();\n                            return;\n                        }\n                        try { input.closest('li').remove(); } catch(e){}\n                        if (old_tag) update_globals();\n                    }\n                    // remove duplicates\n                    else if (o.removeDuplicates)\n                        $('.tag-editor-tag:not(.active)', ed).each(function(){ if ($(this).text() == tag) $(this).closest('li').remove(); });\n                }\n                input.parent().html(escape(tag)).removeClass('active');\n                if (tag != old_tag) update_globals();\n                set_placeholder();\n            });\n\n            var pasted_content;\n            ed.on('paste', 'input', function(e){\n                $(this).removeAttr('maxlength');\n                pasted_content = $(this);\n                setTimeout(function(){ split_cleanup(pasted_content); }, 30);\n            });\n\n            // keypress delimiter\n            var inp;\n            ed.on('keypress', 'input', function(e){\n                if (o.delimiter.indexOf(String.fromCharCode(e.which))>=0) {\n                    inp = $(this);\n                    setTimeout(function(){ split_cleanup(inp); }, 20);\n                }\n            });\n\n            ed.on('keydown', 'input', function(e){\n                var $t = $(this);\n\n                // left/up key + backspace key on empty field\n                if ((e.which == 37 || !o.autocomplete && e.which == 38) && !$t.caret() || e.which == 8 && !$t.val()) {\n                    var prev_tag = $t.closest('li').prev('li').find('.tag-editor-tag');\n                    if (prev_tag.length) prev_tag.click().find('input').caret(-1);\n                    else if ($t.val() && !(o.maxTags && ed.data('tags').length >= o.maxTags)) $(new_tag).insertBefore($t.closest('li')).find('.tag-editor-tag').click();\n                    return false;\n                }\n                // right/down key\n                else if ((e.which == 39 || !o.autocomplete && e.which == 40) && ($t.caret() == $t.val().length)) {\n                    var next_tag = $t.closest('li').next('li').find('.tag-editor-tag');\n                    if (next_tag.length) next_tag.click().find('input').caret(0);\n                    else if ($t.val()) ed.click();\n                    return false;\n                }\n                // tab key\n                else if (e.which == 9) {\n                    // shift+tab\n                    if (e.shiftKey) {\n                        var prev_tag = $t.closest('li').prev('li').find('.tag-editor-tag');\n                        if (prev_tag.length) prev_tag.click().find('input').caret(0);\n                        else if ($t.val() && !(o.maxTags && ed.data('tags').length >= o.maxTags)) $(new_tag).insertBefore($t.closest('li')).find('.tag-editor-tag').click();\n                        // allow tabbing to previous element\n                        else {\n                            el.attr('disabled', 'disabled');\n                            setTimeout(function(){ el.removeAttr('disabled'); }, 30);\n                            return;\n                        }\n                        return false;\n                        // tab\n                    } else {\n                        var next_tag = $t.closest('li').next('li').find('.tag-editor-tag');\n                        if (next_tag.length) next_tag.click().find('input').caret(0);\n                        else if ($t.val()) ed.click();\n                        else return; // allow tabbing to next element\n                        return false;\n                    }\n                }\n                // del key\n                else if (e.which == 46 && (!$.trim($t.val()) || ($t.caret() == $t.val().length))) {\n                    var next_tag = $t.closest('li').next('li').find('.tag-editor-tag');\n                    if (next_tag.length) next_tag.click().find('input').caret(0);\n                    else if ($t.val()) ed.click();\n                    return false;\n                }\n                // enter key\n                else if (e.which == 13) {\n                    ed.trigger('click', [$t.closest('li').next('li').find('.tag-editor-tag')]);\n\n                    // trigger blur if maxTags limit is reached\n                    if (o.maxTags && ed.data('tags').length >= o.maxTags) ed.find('input').blur();\n\n                    return false;\n                }\n                // pos1\n                else if (e.which == 36 && !$t.caret()) ed.find('.tag-editor-tag').first().click();\n                // end\n                else if (e.which == 35 && $t.caret() == $t.val().length) ed.find('.tag-editor-tag').last().click();\n                // esc\n                else if (e.which == 27) {\n                    $t.val($t.data('old_tag') ? $t.data('old_tag') : '').blur();\n                    return false;\n                }\n            });\n\n            // create initial tags\n            var tags = o.initialTags.length ? o.initialTags : el.val().split(o.dregex);\n            for (var i=0; i<tags.length; i++) {\n                if (o.maxTags && i >= o.maxTags) break;\n                var tag = $.trim(tags[i].replace(/ +/, ' '));\n                if (tag) {\n                    if (o.forceLowercase) tag = tag.toLowerCase();\n                    tag_list.push(tag);\n                    ed.append('<li><div class=\"tag-editor-spacer\">&nbsp;'+o.delimiter[0]+'</div><div class=\"tag-editor-tag\">'+escape(tag)+'</div><div class=\"tag-editor-delete\"><i></i></div></li>');\n                }\n            }\n            update_globals(true); // true -> no onChange callback\n\n            // init sortable\n            if (o.sortable && $.fn.sortable) ed.sortable({\n                distance: 5, cancel: '.tag-editor-spacer, input', helper: 'clone',\n                update: function(){ update_globals(); }\n            });\n        });\n    };\n\n    $.fn.tagEditor.defaults = {\n        initialTags: [],\n        maxTags: 0,\n        maxLength: 50,\n        delimiter: ',;',\n        placeholder: '',\n        forceLowercase: true,\n        removeDuplicates: true,\n        clickDelete: false,\n        animateDelete: 175,\n        sortable: true, // jQuery UI sortable\n        autocomplete: null, // options dict for jQuery UI autocomplete\n\n        // callbacks\n        onChange: function(){},\n        beforeTagSave: function(){},\n        beforeTagDelete: function(){}\n    };\n}(jQuery));"],"sourceRoot":"js/"}